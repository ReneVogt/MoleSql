<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MoleSql</name>
    </assembly>
    <members>
        <member name="T:MoleSql.DataContext">
            <summary>
            Represents a data context for the MoleSQL ORM framework.
            </summary>
        </member>
        <member name="P:MoleSql.DataContext.Log">
            <summary>
            Gets or sets a <see cref="T:System.IO.TextWriter"/> that receives the SQL queries generated by the
            underlying query provider. Only the <see cref="M:System.IO.TextWriter.WriteLine(System.String)"/> overload
            is used when writing to this <see cref="T:System.IO.TextWriter"/>, and each "line" is a complete SQL
            statement. So when providing a custom implementation, only this overload needs to be
            overwritten to catch all log messages.
            </summary>
        </member>
        <member name="P:MoleSql.DataContext.Connection">
            <summary>
            Gets the underlying <see cref="T:System.Data.SqlClient.SqlConnection"/> of this context.
            </summary>
        </member>
        <member name="P:MoleSql.DataContext.Transaction">
            <summary>
            Gets or sets the transaction to use when interacting with the database.
            </summary>
        </member>
        <member name="M:MoleSql.DataContext.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:MoleSql.DataContext"/> for the specified connection.
            </summary>
            <param name="connectionString">A connection string defining the SQL server connection to use.</param>
        </member>
        <member name="M:MoleSql.DataContext.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            Creates a new <see cref="T:MoleSql.DataContext"/> for the given <see cref="T:System.Data.SqlClient.SqlConnection"/>.
            </summary>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use with this context.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connection"/> was <code>null</code>.</exception>
        </member>
        <member name="M:MoleSql.DataContext.#ctor(System.Data.SqlClient.SqlConnection,System.Boolean)">
            <summary>
            Creates a new <see cref="T:MoleSql.DataContext"/> for the given <see cref="T:System.Data.SqlClient.SqlConnection"/>.
            </summary>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to use with this context.</param>
            <param name="ownConnection"><code>true</code> if the <paramref name="connection"/> should be owned by this context
            and disposed when this context is disposed, <code>false</code> if the caller stays responsible for the connection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connection"/> was <code>null</code>.</exception>
        </member>
        <member name="M:MoleSql.DataContext.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MoleSql.DataContext.Dispose(System.Boolean)">
            <summary>
            Disposes of this <see cref="T:MoleSql.DataContext"/> and the underlying connection if necessary.
            </summary>
            <param name="disposing"><code>true</code> if called by <see cref="M:MoleSql.DataContext.Dispose"/>, <code>false</code> if called from a finalizer.</param>
        </member>
        <member name="M:MoleSql.DataContext.GetTable``1">
            <summary>
            Creates a query to the specified table.
            </summary>
            <typeparam name="T">The table to query.</typeparam>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/> representing a query to the table specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:MoleSql.DataContext.BeginTransaction">
            <summary>
            Starts a database transaction with the specified isolation level and transaction name.
            </summary>
            <returns>An object representing the new transaction.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</exception>
            <exception cref="T:System.InvalidOperationException">Parallel transactions are not supported.</exception>
        </member>
        <member name="M:MoleSql.DataContext.BeginTransaction(System.String)">
            <summary>
            Starts a database transaction with the specified isolation level and transaction name.
            </summary>
            <param name="transactionName">The name of the transaction.</param>
            <returns>An object representing the new transaction.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</exception>
            <exception cref="T:System.InvalidOperationException">Parallel transactions are not supported.</exception>
        </member>
        <member name="M:MoleSql.DataContext.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a database transaction with the specified isolation level and transaction name.
            </summary>
            <param name="iso">The isolation level under which the transaction should run.</param>
            <returns>An object representing the new transaction.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</exception>
            <exception cref="T:System.InvalidOperationException">Parallel transactions are not supported.</exception>
        </member>
        <member name="M:MoleSql.DataContext.BeginTransaction(System.Data.IsolationLevel,System.String)">
            <summary>
            Starts a database transaction with the specified isolation level and transaction name.
            </summary>
            <param name="iso">The isolation level under which the transaction should run.</param>
            <param name="transactionName">The name of the transaction.</param>
            <returns>An object representing the new transaction.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</exception>
            <exception cref="T:System.InvalidOperationException">Parallel transactions are not supported.</exception>
        </member>
        <member name="M:MoleSql.DataContext.ExecuteQuery``1(System.FormattableString)">
            <summary>
            Executes the given query and returns a sequence of results.
            </summary>
            <typeparam name="T">The result type of the queried enumeration.</typeparam>
            <param name="query">The sql command to execute. Format parameters will be turned into query parameters.</param>
            <returns>An enumerator for the query results.</returns>
        </member>
        <member name="M:MoleSql.DataContext.ExecuteQueryAsync``1(System.FormattableString,System.Threading.CancellationToken)">
            <summary>
            Executes the given query and returns an asynchronous sequence of results.
            </summary>
            <typeparam name="T">The result type of the queried enumeration.</typeparam>
            <param name="query">The sql command to execute. Format parameters will be turned into query parameters.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>An asynchronous enumeration of the query results.</returns>
        </member>
        <member name="M:MoleSql.DataContext.ExecuteQuery(System.FormattableString)">
            <summary>
            Executes the given query and returns a sequence of dynmic instances.
            </summary>
            <param name="query">The sql command to execute. Format parameters will be turned into query parameters.</param>
            <returns>An enumerator for the query results. Those will be dynamic objects.</returns>
        </member>
        <member name="M:MoleSql.DataContext.ExecuteQueryAsync(System.FormattableString,System.Threading.CancellationToken)">
            <summary>
            Executes the given query and returns an asynchronous sequence of dynmic instances.
            </summary>
            <param name="query">The sql command to execute. Format parameters will be turned into query parameters.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>An asynchronous enumeratorion of the query results. Those will be dynamic objects.</returns>
        </member>
        <member name="M:MoleSql.DataContext.ExecuteScalar(System.FormattableString)">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            </summary>
            <param name="query">The query to execute.</param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters.</returns>
        </member>
        <member name="M:MoleSql.DataContext.ExecuteScalar``1(System.FormattableString)">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            </summary>
            <param name="query">The query to execute.</param>
            <typeparam name="T">The type to cast the result to.</typeparam>
            <returns>The first column of the first row in the result set as <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:MoleSql.DataContext.ExecuteScalarAsync(System.FormattableString,System.Threading.CancellationToken)">
            <summary>
            Executes the query asynchronously, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            </summary>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty. Returns a maximum of 2033 characters.</returns>
        </member>
        <member name="M:MoleSql.DataContext.ExecuteScalarAsync``1(System.FormattableString,System.Threading.CancellationToken)">
            <summary>
            Executes the query asynchronously, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            </summary>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <typeparam name="T">The type to cast the result to.</typeparam>
            <returns>The first column of the first row in the result set as <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:MoleSql.DataContext.ExecuteNonQuery(System.FormattableString)">
            <summary>
            Executes the given query or command and returns the number of affected rows.
            </summary>
            <param name="query">The sql command to execute. Format parameters will be turned into query parameters.</param>
            <returns>The number of affected rows.</returns>
        </member>
        <member name="M:MoleSql.DataContext.ExecuteNonQueryAsync(System.FormattableString,System.Threading.CancellationToken)">
            <summary>
            Executes the given query or command asynchronoulsy and returns a task that on completion returns the number of affected rows.
            </summary>
            <param name="query">The sql command to execute. Format parameters will be turned into query parameters.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
        </member>
        <member name="T:MoleSql.Expressions.DbExpressionType">
            <summary>
            Extends the original <see cref="T:System.Linq.Expressions.ExpressionType"/> with new sql expression types to create
            SQL/CLR-hybrid expression trees.
            </summary>
        </member>
        <member name="M:MoleSql.Expressions.ExpressionExtensions.StripQuotes(System.Linq.Expressions.Expression)">
            <summary>
            Removes the quote expressions around lambda expressions.
            </summary>
            <param name="expression">The expression to remove outer quotes from.</param>
            <returns>The "naked" lambda expression without outer quotes.</returns>
        </member>
        <member name="T:MoleSql.Extensions.MoleSqlQueryable">
            <summary>
            Provides special operators IQueryables based on <see cref="T:MoleSql.QueryProvider"/> instances.
            </summary>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int32"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int32"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int64"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int64"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Single"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Single"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int32"/> values
            that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int32"/> values
            that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Single"/> values
            that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Single"/> values
            that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Int64"/> values
            that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Int64"/> values
            that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Double"/> values
            that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Double"/> values
            that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of <see cref="T:System.Decimal"/> values
            that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the average of a sequence of nullable <see cref="T:System.Decimal"/> values
            that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The average of the sequence values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the number of elements in the specified sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The number of elements in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.OverflowException">The number of matching elements in the sequence is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns the number of elements in the specified sequence that satisfies a condition.
            </summary>
            <typeparam name="TSource">The type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The number of elements in the sequence that satisfies the condition in the predicate function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> were <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
            <exception cref="T:System.OverflowException">The number of matching elements in the sequence is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Lets the query provider execute the <paramref name="source"/> query asynchronously and stores the rows into a list.
            </summary>
            <typeparam name="T">The type of the resulting rows.</typeparam>
            <param name="source">The source query to execute.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>A task that on completion returns a list of the resulting rows.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.AsAsyncEnumerable``1(System.Linq.IQueryable{``0})">
            <summary>
            Lets the query provider execute the <paramref name="source"/> query asynchronously and returns an asynchronous sequence of the results.
            </summary>
            <typeparam name="T">The type of the resulting rows.</typeparam>
            <param name="source">The source query to execute.</param>
            <returns>A sequence of rows that can be iterated asynchronously.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> was <code>null</code>.</exception>
            <exception cref="T:System.NotSupportedException">This method can only be used with a <see cref="T:MoleSql.QueryProvider"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a query to determine the maximum of the input query (<paramref name="source"/>).
            </summary>
            <typeparam name="T">The type of the rows in the input query.</typeparam>
            <param name="source">The input query.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>A task that on completion returns the maximum value.</returns>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a query to determine the maximum of the input query (<paramref name="source"/>).
            </summary>
            <typeparam name="TSource">The type of the rows in the input query.</typeparam>
            <typeparam name="TResult">The result type of the projection by <paramref name="selector"/>.</typeparam>
            <param name="source">The input query.</param>
            <param name="selector">A projection to choose values from the input sequence for which the maximum should be returned.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>A task that on completion returns the maximum value.</returns>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a query to determine the minimum of the input query (<paramref name="source"/>).
            </summary>
            <typeparam name="T">The type of the rows in the input query.</typeparam>
            <param name="source">The input query.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>A task that on completion returns the minimum value.</returns>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a query to determine the minimum of the input query (<paramref name="source"/>).
            </summary>
            <typeparam name="TSource">The type of the rows in the input query.</typeparam>
            <typeparam name="TResult">The result type of the projection by <paramref name="selector"/>.</typeparam>
            <param name="source">The input query.</param>
            <param name="selector">A projection to choose values from the input sequence for which the minimum should be returned.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>A task that on completion returns the minimum value.</returns>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int32"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int32"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int64"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int64"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Single"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Single.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Single"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Single.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="source">The input sequence.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int32"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> are <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int32"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> are <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Int64"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> are <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Int64"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> are <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Single"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> are <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Single.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Single"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> are <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Single.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Double"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> are <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Double"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> are <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of <see cref="T:System.Decimal"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> are <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:MoleSql.Extensions.MoleSqlQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously computes the sum of the sequence of nullable <see cref="T:System.Decimal"/> values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of values of type <typeparamref name="TSource"/>.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>The sum of the projected values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> are <code>null</code>.</exception>
            <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="T:MoleSql.Helpers.ProjectionRow">
            <summary>
            This base class is used to bind columns. It is used as a constant expression in the projection
            lambda expression to read columns by their ordinal (the index parameter of the <see cref="M:MoleSql.Helpers.ProjectionRow.GetValue``1(System.Int32)"/> method)
            from the <see cref="T:System.Data.SqlClient.SqlDataReader"/>.<br/>
            It also declares a <see cref="M:MoleSql.Helpers.ProjectionRow.ExecuteSubQuery``1(System.Linq.Expressions.LambdaExpression)"/> method that exeuctes sub queries (<see cref="T:MoleSql.Expressions.ProjectionExpression"/>) in selectors.
            The lambda expressions will be created by the <see cref="T:MoleSql.Translators.ProjectionBuilder"/> and the reading will be done in the <see cref="T:MoleSql.Mapper.ProjectionReader`1"/>.
            </summary>
        </member>
        <member name="T:MoleSql.Helpers.TypeSystemHelper">
            <summary>
            Provides helper methods (extensions) for common type system questions:
            <see cref="M:MoleSql.Helpers.TypeSystemHelper.GetElementType(System.Type)"/> finds the type of an element
            in a sequential type (<see cref="T:System.Collections.Generic.IEnumerable`1"/>) and <see cref="M:MoleSql.Helpers.TypeSystemHelper.GetSequenceType(System.Type)"/>
            creates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> for the given element type.
            </summary>
        </member>
        <member name="M:MoleSql.Helpers.TypeSystemHelper.ChangeType(System.Object,System.Type)">
            <summary>
            Tries to convert an object into another type.
            This method is used to convert for example an <see cref="T:System.Int32"/> into an <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="type">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> to.</param>
            <returns>The <paramref name="value"/> represented as <paramref name="type"/>.</returns>
        </member>
        <member name="M:MoleSql.Helpers.TypeSystemHelper.GetElementType(System.Type)">
            <summary>
            Determines if the given <paramref name="sequenceType"/> is in any way
            assignable to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> and if so, returns the
            generic type argument for this interface.
            It therefor uses the private <see cref="M:MoleSql.Helpers.TypeSystemHelper.FindIEnumerable(System.Type)"/> method which
            determines if the given type or any of it's base types implements the
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
            <param name="sequenceType">The <see cref="T:System.Type"/> to investigate.</param>
            <returns>The <paramref name="sequenceType"/> itself if it does not implement any
            kind of <see cref="T:System.Collections.Generic.IEnumerable`1"/> or that "T" if one is found.</returns>
        </member>
        <member name="M:MoleSql.Helpers.TypeSystemHelper.GetSequenceType(System.Type)">
            <summary>
            Creates the <see cref="T:System.Collections.Generic.IEnumerable`1"/> type with <paramref name="elementType"/>
            as generic argument.
            </summary>
            <param name="elementType">The element type of the created sequence type.</param>
            <returns>A <see cref="T:System.Type"/> instance representing the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <paramref name="elementType"/> type.</returns>
        </member>
        <member name="M:MoleSql.Helpers.TypeSystemHelper.FindIEnumerable(System.Type)">
            <summary>
            Checks if the given <paramref name="sequenceType"/> or one of its base
            types represents or implements or derives from a type implementing the
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface and if so, returns this constructed
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="sequenceType">The <see cref="T:System.Type"/> to investigate.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that is in any way implemented by <paramref name="sequenceType"/> or
            <code>null</code> <paramref name="sequenceType"/> is not assignable to any version of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:MoleSql.Mapper.SqlDataReaderMapper.ReadObjects``1(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Reads rows from a <see cref="T:System.Data.SqlClient.SqlDataReader"/> and stores the values in instances of <typeparamref name="T"/>.
            It therefor looks for properties (not fields!) in <typeparamref name="T"/> that match the column names in the <see cref="T:System.Data.SqlClient.SqlDataReader"/>.
            </summary>
            <typeparam name="T">The type of the row objects to generate.</typeparam>
            <param name="reader">The <see cref="T:System.Data.SqlClient.SqlDataReader"/> to read from.</param>
            <returns>A sequence of objects of type <typeparamref name="T"/> representing the rows from the <paramref name="reader"/>.</returns>
        </member>
        <member name="M:MoleSql.Mapper.SqlDataReaderMapper.ReadObjectsAsync``1(System.Data.SqlClient.SqlDataReader,System.Threading.CancellationToken)">
            <summary>
            Reads rows from a <see cref="T:System.Data.SqlClient.SqlDataReader"/> asynchronously and stores the values in instances of <typeparamref name="T"/>.
            It therefor looks for properties (not fields!) in <typeparamref name="T"/> that match the column names in the <see cref="T:System.Data.SqlClient.SqlDataReader"/>.
            </summary>
            <typeparam name="T">The type of the row objects to generate.</typeparam>
            <param name="reader">The <see cref="T:System.Data.SqlClient.SqlDataReader"/> to read from.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>A sequence of objects of type <typeparamref name="T"/> representing the rows from the <paramref name="reader"/>.</returns>
        </member>
        <member name="M:MoleSql.Mapper.SqlDataReaderMapper.ReadObjects(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Reads rows from a <see cref="T:System.Data.SqlClient.SqlDataReader"/> and stores the values in <see cref="T:System.Dynamic.ExpandoObject"/> instances
            to be used as dynamic objects.
            </summary>
            <param name="reader">The <see cref="T:System.Data.SqlClient.SqlDataReader"/> to read from.</param>
            <returns>A sequence of dynamic objects representing the rows from the <paramref name="reader"/>.</returns>
        </member>
        <member name="M:MoleSql.Mapper.SqlDataReaderMapper.ReadObjectsAsync(System.Data.SqlClient.SqlDataReader,System.Threading.CancellationToken)">
            <summary>
            Reads rows from a <see cref="T:System.Data.SqlClient.SqlDataReader"/> asynchronously and stores the values in <see cref="T:System.Dynamic.ExpandoObject"/> instances
            to be used as dynamic objects.
            </summary>
            <param name="reader">The <see cref="T:System.Data.SqlClient.SqlDataReader"/> to read from.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to cancel this asynchronous operation.</param>
            <returns>A task that on completion returns a sequence of dynamic objects representing the rows from the <paramref name="reader"/>.</returns>
        </member>
        <member name="T:MoleSql.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_AggregateTypeNotSupported">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The aggregate type &apos;{0}&apos; is not supported. ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_BinaryExpressionCannotBeAppliedToNullValues">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Cannot apply operator &apos;{0}&apos; to NULL values. ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_BinaryExpressionIsNotSupported">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The binary operator &apos;{0}&apos; is not supported. ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_CanOnlyBeIteratedOnce">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die A result set can only be iterated once (in &apos;{0}&apos;). ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_DoesNotSupportDifferentQueryProvider">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The method &apos;{0}&apos; only supports queries based on &apos;{1}&apos;. ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_ExpressionIsNotASequence">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The expression of type &apos;{0}&apos; (node type &apos;{1}&apos;) is not a sequence. ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_JoinTypeIsNotSupported">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The join type &apos;{0}&apos; is not supported. ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_MethodCanOnlyAppearOnTopOfExpressionTree">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Asynchronous aggregators like &apos;{0}&apos; can only appear on top of the expression tree. ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_MethodNotSupported">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The method &apos;{0}&apos; is not supported. ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_NodeTypeIsInvalid">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The expression node type &apos;{0}&apos; is invalid at this point. ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_NodeTypeIsInvalidSelectSourceType">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The expression node type &apos;{0}&apos; is not a valid type for a SELECT source. ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_NullCannotBeCastToType">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Cannot convert  a null reference to &apos;{0}&apos;. ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_NullValuesOnLeftSideNotSupported">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die NULL values are not supported on the left side of binary operands. ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_ObjectDisposed">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The &apos;{0}&apos; instance has already been disposed. ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_ReferenceToUndefinedColumn">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die Reference to undefined column. ähnelt.
            </summary>
        </member>
        <member name="P:MoleSql.Properties.Resources.Exception_UnaryExpressionIsNotSupported">
            <summary>
              Sucht eine lokalisierte Zeichenfolge, die The unary operator &apos;{0}&apos; is not supported. ähnelt.
            </summary>
        </member>
        <member name="T:MoleSql.Query`1">
            <summary>
            The root element for MoleSql queries.
            </summary>
            <typeparam name="T">The type of the table.</typeparam>
        </member>
        <member name="P:MoleSql.Query`1.Expression">
            <inheritdoc />
        </member>
        <member name="P:MoleSql.Query`1.ElementType">
            <inheritdoc />
        </member>
        <member name="P:MoleSql.Query`1.Provider">
            <inheritdoc />
        </member>
        <member name="M:MoleSql.Query`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:MoleSql.Query`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:MoleSql.QueryProvider.Log">
            <summary>
            When writing to this <see cref="T:System.IO.TextWriter"/>, please only
            use the <see cref="M:System.IO.TextWriter.WriteLine(System.String)"/> overload.
            That's what is promised to clients so it's easier to implement
            a class deriving from <see cref="T:System.IO.TextWriter"/> to use with
            this provider.
            </summary>
        </member>
        <member name="T:MoleSql.Translators.LocalEvaluator">
            <summary>
            This class visits an expression and will evaluate all parts of it that already can be evaluated.
            That is, all parts that don't refer to an parameter expression (hence requiring the database to be queried first).
            </summary>
        </member>
        <member name="M:MoleSql.Translators.LocalEvaluator.EvaluateLocally(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Traverses the given <paramref name="expression"/> and evaluates all parts of it that can be
            evaluated locally without querying the database. That means that all constant expressions,
            local method calls, calculations etc. are evaluated and represented in the final expression tree
            as primitive constants.<br/>
            This needs to be done before translating the expression tree into SQL.
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression"/> to evaluate.</param>
            <param name="canBeEvaluated">A function to determine if an expression can be evaluated locally.</param>
            <returns>The resulting <see cref="T:System.Linq.Expressions.Expression"/> that no longer contains anything else but parameter or primitive constant expressions.</returns>
        </member>
        <member name="T:MoleSql.Translators.SqlFormattableString">
            <summary>
            Provides the extension method <see cref="M:MoleSql.Translators.SqlFormattableString.CreateParameterizedCommand(System.Data.SqlClient.SqlConnection,System.FormattableString)"/> to create
            parameterized SQL queries (<see cref="T:System.Data.SqlClient.SqlCommand"/>) from formattable strings (<see cref="T:System.FormattableString"/>).
            </summary>
        </member>
        <member name="T:MoleSql.Translators.SqlFormattableString.FormatCapturingParameter">
            <summary>
            Holds a sql format parameter.
            </summary>
            <remarks>
            The format parameter is converted into an <see cref="T:System.Data.SqlClient.SqlParameter"/> with the
            corresponding parameter name ('@pXX'). The second parameter of the constructor
            is used to count the parameters.
            If the argument is an <see cref="T:System.Collections.IEnumerable"/> (but not <see cref="T:System.String"/>),
            multiple SqlParameters are created and later formated with braces ("(@p0, @p1...)").
            </remarks>
        </member>
        <member name="T:MoleSql.Translators.SqlQueryTranslator">
            <summary>
            Provides a static entry point (<see cref="M:MoleSql.Translators.SqlQueryTranslator.Translate(MoleSql.QueryProvider,System.Linq.Expressions.Expression)"/>) to translate expression trees
            into sql queries.
            </summary>
        </member>
        <member name="M:MoleSql.Translators.SqlQueryTranslator.Translate(MoleSql.QueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Translates the given <paramref name="expression"/> into an SQL query.
            </summary>
            <param name="provider">The <see cref="T:MoleSql.QueryProvider"/> that executes this query. This is necessary to determine locally evaluatable expression subtrees.</param>
            <param name="expression">The expression tree to translate.</param>
            <returns>A <see cref="T:MoleSql.Translators.TranslationResult"/> holding the information required to build a <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute the query.</returns>
        </member>
        <member name="T:MoleSql.Translators.TranslationResult">
            <summary>
            Represents the result of a complete translation of an expreesion tree into an SQL query.
            Includes the sql query text (<see cref="P:MoleSql.Translators.TranslationResult.CommandText"/>), a lambda expression to project the results
            into objects (<see cref="P:MoleSql.Translators.TranslationResult.Projection"/> and a list of parameters for the sql query (<see cref="P:MoleSql.Translators.TranslationResult.Parameters"/>).
            </summary>
        </member>
    </members>
</doc>
