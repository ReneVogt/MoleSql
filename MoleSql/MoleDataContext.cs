using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using MoleSql.QueryProviders;

namespace MoleSql
{
    /// <summary>
    /// Represents a data context for the MoleSQL ORM framework.
    /// </summary>
    public class MoleDataContext : IDisposable
    {
        readonly IDbConnection connection;
        readonly MoleQueryProvider provider;
        readonly bool disposeConnection;

        bool disposed;

        /// <summary>
        /// Gets or sets a <see cref="TextWriter"/> that receives the SQL queries generated by the
        /// underlying query provider.
        /// </summary>
        public TextWriter Log
        {
            get => provider.Log;
            set => provider.Log = value;
        }

        /// <summary>
        /// Creates a new <see cref="MoleDataContext"/> for the specified connection.
        /// </summary>
        /// <param name="connectionString">A connection string defining the SQL server connection to use.</param>
        public MoleDataContext(string connectionString)
        {
            disposeConnection = true;
            var sqlConnection = new SqlConnection(connectionString);
            connection = sqlConnection; 
            provider = new SqlQueryProvider(sqlConnection);
        }

        /// <summary>
        /// Creates a new <see cref="MoleDataContext"/> for the given <see cref="SqlConnection"/>.
        /// </summary>
        /// <param name="connection">The <see cref="SqlConnection"/> to use with this context.</param>
        /// <exception cref="ArgumentNullException"><paramref name="connection"/> was <code>null</code>.</exception>
        public MoleDataContext(SqlConnection connection)
        {
            this.connection = connection ?? throw new ArgumentNullException(nameof(connection));
            provider = new SqlQueryProvider(connection);
        }

        /// <inheritdoc />
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        /// <summary>
        /// Disposes of this <see cref="MoleDataContext"/> and the underlying connection if necessary.
        /// </summary>
        /// <param name="disposing"><code>true</code> if called by <see cref="Dispose()"/>, <code>false</code> if called from a finalizer.</param>
        protected virtual void Dispose(bool disposing)
        {
            if (disposed || !disposing) return;
            if (disposeConnection)
                connection.Dispose();
            disposed = true;
        }

        /// <summary>
        /// Creates a query to the specified table.
        /// </summary>
        /// <typeparam name="T">The table to query.</typeparam>
        /// <returns>An <see cref="IQueryable{T}"/> representing a query to the table specified by <typeparamref name="T"/>.</returns>
        public MoleQuery<T> GetTable<T>()
        {
            CheckDisposed();
            return new MoleQuery<T>(provider);
        }

        void CheckDisposed()
        {
            if (disposed) throw new ObjectDisposedException(nameof(MoleDataContext));
        }
    }
}
